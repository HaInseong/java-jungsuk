package ch7;

/* 내부 클래스의 장점
* 1. 내부 클래스에서 외부 클래스의 멤버들을 쉽게 접근할 수 있다.
* 기존처럼 나눠서 클래스를 작성한 경우 다른 클래스에 접근하려면 객체를 생성해야 한다.
* 내부 클래스로 작성한 경우 객체 생성 없이도 다른 클래스의 멤버에 접근 가능하다.
*
* 2. 코드의 복잡성을 줄일 수 있다.(캡슐화)
* B클래스를 A클래스 안에서만 사용한다면 굳이 밖으로 노출 시킬 필요 없으므로 A클래스의 내부 클래스로 작성한다.
* 이렇게하면 다른 클래스에서는 B클래스가 보이지 않게 된다.
* 이처럼 캡슐화를 하면 코드의 복잡성을 줄일 수 있고,
* 객체 생성 없이도 A의 멤버에 접근 가능하다. 즉, 내부 클래스에서 외부 클래스의 접근이 자유롭다.
* 사실, 내부 클래스 B를 외부 클래스 A의 멤버라고 생각하면 된다.*/

class AAA { // AAA는 BBB의 외부 클래스
    int i = 100;
    BBB b = new BBB();
    // ★ 내부 클래스의 종류와 유효범위(scope)는 iv, cv, lv 변수와 동일하다.
    // 왜냐하면, 내부클래스를 외부 클래스의 멤버나 다름없기 때문에 사용법도 같다.
    // 심지어 접근제어자도 일반 클래스는 default, public만 가능하지만,
    // 내부 클래스는 멤버 변수의 특징을 닮아 모든 접근제어자 선언이 가능하다.
    class BBB { // BBB는 AAA의 내부 클래스
        void method() {
//            AAA a = new AAA();
//            System.out.println(a.i);
            System.out.println(i); // 객체 생성없이 외부 클래스의 멤버 접근 가능
        }
    }
}

class CCC {
//    BBB b = new BBB();
}

public class Ex7_12_내부클래스 {
    public static void main(String[] args) {
//        BBB b = new BBB();
//        b.method();
        AAA a = new AAA();
        a.b.method();
    }
}
